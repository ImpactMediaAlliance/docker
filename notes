Docker
docker info
docker version

DockerHub
docker login // from local repository
docker image push <dockerhubid>/<imagename>:tag where local repo username matches dockerhub username
// ex: docker image push impactmedia/linux_tweet_app:1.0 refers to repository [docker.io/impactmedia/linux_tweet_app'
// then push another version to same DockerHub repo with 
// docker image push impactmedia/linux_tweeter_app:2.0

Docker Compose
// used to control multiple containers on a single system
docker-compose.yml in the root of your project directory
docker-compose build
docker-compose up, docker-compose -d
docker-compose down

Swarm Mode 
// tells Docker that you will be running many Docker engines and you want to coordinate operations across all of them. 
// Swarm mode combines the ability to not only define the application architecture, like Compose, 
// but to define and maintain high availability levels, scaling, load balancing, and more. 
// With all this functionality, Swarm mode is used more often in production environments than it’s more simplistic cousin, Compose.

Dockerfile
// A text file that contains all the commands, in order, needed to build a given image
Dockerfile can go in subdirectories

docker build
docker run -it --name [name]
-it is -i and -t tag ?
--rm removes itself after container is stopped

Containers
docker container ls or docker ps - list active containers
docker container ls -a or docker ps -a - list all containers
docker container -l or docker ps -l - list last container created (note: small L not a 1)
docker container commit <container id>
Run the container bash, using the following command.
docker run // creates a container
docker start [container id or name]
docker stop [container id or name]

Running Containers
docker inspect <container id or container name>
docker container diff <container id> // 
docker exec -it <container_name> bash // exec sends a command to a container
exit (from shell) - to exit a container
Ctr-C shut down containers
Ctrl-P Ctrl-Q - Detaching from the container without stopping

Images
List - docker image ls or docker images - list images
docker image build -t myimagename:v0.1 . 
// builds an image named myimagename with the tag v0.1 using a Dockerfile in PWD 
// then docker container run myimagename:v0.1
docker image inspect alpine // <image id> for your own image
docker image inspect --format "{{ json .RootFS.Layers }}" alpine // list of images
Rename - docker tag <oldimagename:tag> <newimagename:tag> // rename an image then remove oldname with docker rmi <oldimagename:tag> after renaming
docker pull - pulls images remotely if not stored locally

docker run -d --name devtest -v myvol2:/app nginx:latest
docker image history <image id>

Remove -
docker rmi? [id], docker rmi? -f [name]
docker rmi [image name]
docker purge? ls

Tags
docker image tag <image id> <tagname>

Nodes
docker node ls // list nodes

Stacks
docker stack ls
docker stack deploy --compose-file=docker-stack-.yml voting_stack
docker stack services voting_stack

Mounts


Volumes
// A special Docker container layer that allows data to persist and be shared separately from the container itself
docker volume create <volume-name>
docker volume ls
docker volume inspect <volume-name>
docker volume rm <volume-name>
docker purge?
-v or --volume
-v uniquenamedvolume:container/path:optionalcomma-separatedlistofoptions (ro for read-only)
--mount 
(order not significant)
(key value pairs)
type=bind, volume or tmps
src or source=<volume-name> (for anonymous left blank)
dst, destination or target;path of file or directory mounted in the container

Services 
docker service create --name <service-name> (does not support the -v or --volume tage, must use --mount)
docker service ps <service-name>
docker service rm <service-name>

Layers
// A Docker image is built up from a series of layers. 
// Each layer represents an instruction in the image’s Dockerfile. 
// Each layer except the last one is read-only.

Linux
apt-get update
echo "console.log(\"added text\");" >> myfile.ext // addes test to an existing file with extension of .ext

SQL Server for Linux
https://hub.docker.com/r/microsoft/mssql-server-linux/
https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-2017&pivots=cs1-bash

Express Edition
docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=MyPass@word" -e "MSSQL_PID=Express" \
-p 1439:1433 -d --name=sql -v //c/mount/sql:/var/opt/mssql/data microsoft/mssql-server-linux:latest

connection string: 
Server=localhost,1433;Initial Catalog=MyDb;Integrated Security=True;User Id=sa;Password=MyPass@word;

Connect to SQL Server
bash
sudo docker exec -it [name] "bash"

sqlcmd
(leave off -P to be prompted for password)
sqlcmd -S localhost -U SA -P '<YourPassword>'
/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '<YourPassword>' 

Name of all databases
SELECT Name from sys.Databases

or?
sqlcmd -U sa –S <YourIP>,<Port>
